services:
  postgres:
    image: postgres:17.0
    container_name: ${KEYCLOAK_DB_HOST_NAME}
    env_file:
      - ./.env
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_INTERNAL_PORT}"
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "${POSTGRES_USER}" ]
      interval: ${HEALTHCHECK_INTERVAL:-30s}
      timeout: ${HEALTHCHECK_TIMEOUT:-10s}
      retries: ${HEALTHCHECK_RETRIES:-5} #ignore the intellij error
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - keycloak_network

  # To access the PostgreSQL database using pgAdmin
  # To re-build the image: docker build -t custom-pgadmin -f Dockerfile.pgadmin .
  pgadmin:
    build:
      context: .
      dockerfile: Dockerfile.pgadmin
    image: custom-pgadmin:latest
    container_name: ${PGADMIN_HOST_NAME}
    env_file:
      - ./.env
    ports:
      - "${PGADMIN_HTTP_PORT}:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    user: 'root' # TODO avoid using the root user and try to use the pgadmin user
    #    user: '5050:5050'  # Ensure that pgadmin runs as pgadmin user (UID 5050)
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - keycloak_network
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "80" ]
      interval: ${HEALTHCHECK_INTERVAL:-30s}
      timeout: ${HEALTHCHECK_TIMEOUT:-10s}
      retries: ${HEALTHCHECK_RETRIES:-5} #ignore the intellij error

networks:
  keycloak_network:
    driver: bridge  # Creates a new bridge network for this service
    name: keycloak_network  # This will match the name in the main compose file

volumes:
  pgadmin_data:
  postgres_data:

# TODO explore the following:
# After disabling the login screen, PgAdmin results in: 400 Bad Request: The CSRF session token is missing.
# PGADMIN_CONFIG_CSFR_SESSION_SECRET
# PGADMIN_CONFIG_DISABLE_CSFR_PROTECTION => Not good for production
# PGADMIN_CONFIG_CSFR_SESSION_SECRET_FILE