name: CI/CD Workflow

on:
  push:
    branches:
      - master

env:
  NPM_VERSION: 10.9.0
#  DOCKER_COMPOSE_DIR: .
  NEWMAN_VERSION: 5.3.0
  DOCKER_VERSION: 5:27.3.1
  PAGES_FOLDER: github-pages
  DOCKER_COMPOSE_VERSION: 2.29.2
  NEWMAN_XML_REPORT_FILE: postman-report.xml
  NEWMAN_HTML_REPORT_FILE: postman-report.html
  POSTMAN_COLLECTION: postman/sample.json
  POSTMAN_ENVIRONMENT: postman/keycloak-local.postman_environment.json

jobs:
  build:
    runs-on: ubuntu-latest

    outputs:
      test_outcome: ${{ steps.test-results.outputs.outcome }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set SITE_ROOT_URL Variable
        run: echo "SITE_ROOT_URL=https://${GITHUB_ACTOR}.github.io/${GITHUB_REPOSITORY#*/}" >> $GITHUB_ENV

      - name: Cache Docker images
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-docker-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-docker-

      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Validate Postman files
        run: |
          if [ ! -f ${{ env.POSTMAN_COLLECTION }} ]; then
            echo "Postman collection not found!" && exit 1
          fi
          if [ ! -f ${{ env.POSTMAN_ENVIRONMENT }} ]; then
            echo "Postman environment not found!" && exit 1
          fi

      - name: Install Docker with specific version
        run: |
          chmod +x ./install_docker.sh
          ./install_docker.sh
        working-directory: ./.github/workflows/scripts

      - name: Install Docker Compose with specific version
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v${{ env.DOCKER_COMPOSE_VERSION }}/docker-compose-$(uname -s)-$(uname -m)" \
            -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Build and run services using start.sh script
        run: |
          chmod +x ../startup_helper.sh
          chmod +x ./start.sh
          # Check if docker-compose is available before running the start.sh script
          which docker-compose || { echo "docker-compose is not installed or not in PATH"; exit 1; }
          ./start.sh
        working-directory: ./postgres # TODO: change it to keycloak once that's ready

      # Installing other dependencies after starting up the services as they'll act as an
      # implicit wait for the services to be fully ready before the tests interact with them.
      - name: Check and install Node.js and npm version
        run: |
          chmod +x ./install_npm_dependencies.sh
          ./install_npm_dependencies.sh
        working-directory: ./.github/workflows/scripts

      - name: Install Newman with specific version
        run: |
          npm install -g newman@${{ env.NEWMAN_VERSION }} newman-reporter-html
          newman --version

      - name: Run Postman tests with Newman
        id: test-results # id is used later on to check whether tests passed or failed
        run: |
          newman run ${{ env.POSTMAN_COLLECTION }} \
            -e ${{ env.POSTMAN_ENVIRONMENT }} \
            --reporters cli,html,junit \
            --reporter-html-export ${{ env.NEWMAN_HTML_REPORT_FILE }} \
            --reporter-junit-export ${{ env.NEWMAN_XML_REPORT_FILE }}
          if [ $? -eq 0 ]; then
            echo "outcome=success" >> $GITHUB_OUTPUT
          else
            echo "outcome=failure" >> $GITHUB_OUTPUT
          fi

      - name: Set Initial Test Results Summary üìú
        run: |
          echo "### Postman Test Results" >> $GITHUB_STEP_SUMMARY
          echo "#### Test run completed, view summary after deployment." >> $GITHUB_STEP_SUMMARY
          echo "#### HTML Report: [View HTML Report](${{ env.SITE_ROOT_URL }}/${{ env.NEWMAN_HTML_REPORT_FILE }})" >> $GITHUB_STEP_SUMMARY
          echo "#### XML Report: [View XML Report](${{ env.SITE_ROOT_URL }}/${{ env.NEWMAN_XML_REPORT_FILE }})" >> $GITHUB_STEP_SUMMARY

      - name: Upload the content for GitHub Pages
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PAGES_FOLDER }}
          path: |
            ${{ env.NEWMAN_XML_REPORT_FILE }}
            ${{ env.NEWMAN_HTML_REPORT_FILE }}

      - name: Clean up Docker containers and volumes
        run: |
          # Explicit check for docker-compose before using it
          which docker-compose || { echo "docker-compose is not installed or not in PATH"; exit 1; }
          docker-compose -f ${{ env.DOCKER_COMPOSE_FILE }} down --volumes --remove-orphans
        working-directory: ./postgres # TODO: change it to keycloak once that's ready

  deploy-gh-pages:
    name: gh-pages-deployment
    runs-on: ubuntu-latest
    needs: build

    permissions:
      contents: write

    steps:
      - name: Checkout the Repository üõéÔ∏è
        uses: actions/checkout@v4

      - name: Download GitHub Pages Artifact üì¶
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.PAGES_FOLDER }}
          path: ${{ env.PAGES_FOLDER }}

      - name: Check Contents of the Directory üìÇ
        run: |
          ls -R .

      - name: Copy README to GitHub Pages Folder
        run: |
          cp README.md ${{ env.PAGES_FOLDER }}/README.md

      - name: Set SITE_ROOT_URL Variable
        run: echo "SITE_ROOT_URL=https://${GITHUB_ACTOR}.github.io/${GITHUB_REPOSITORY#*/}" >> $GITHUB_ENV

      - name: Update README with dynamic badge status
        run: |
          # Determine badge status based on test result outcome
          if [ "${{ needs.build.outputs.test_outcome }}" == "success" ]; then
            BADGE="passing-brightgreen"
          else
            BADGE="failing-red"
          fi
          
          # Construct the badge Markdown with full path to the report
          BADGE_MARKDOWN="[![Build Status](https://img.shields.io/badge/build-${BADGE})](${{ env.SITE_ROOT_URL }}/${{ env.NEWMAN_HTML_REPORT_FILE }})"

          echo "Badge MARKDOWN: ${BADGE_MARKDOWN}"
          
          # Update the README.md file with the badge
          sed -i "s|<!-- BUILD_BADGE_PLACEHOLDER -->|${BADGE_MARKDOWN}|g" "${{ env.PAGES_FOLDER }}/README.md"

      - name: Deploy to GitHub Pages üöÄ
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: ${{ env.PAGES_FOLDER }}

      - name: Display GitHub Pages URL üåê
        run: |
          echo "The GitHub Pages URL is: ${{ env.SITE_ROOT_URL }}"
