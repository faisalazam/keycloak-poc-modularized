name: CI/CD Workflow

on:
  push:
    branches:
      - everything
  pull_request:
    branches:
      - everything

env:
  NPM_VERSION: 10.9.0
  DOCKER_COMPOSE_DIR: .
  NEWMAN_VERSION: 5.3.0
  DOCKER_VERSION: 5:27.3.1
  DOCKER_COMPOSE_VERSION: 2.29.2
  PAGES_FOLDER: github-pages
  NEWMAN_REPORT_FILE: postman-report.html
  DOCKER_COMPOSE_FILE: docker-compose.yml
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  POSTMAN_COLLECTION: postman/sample.json
#  POSTMAN_COLLECTION: postman/keycloak-postman-collection.json
  POSTMAN_ENVIRONMENT: postman/keycloak-local.postman_environment.json

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache Docker images
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-docker-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-docker-

      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Check and install Node.js and npm version
        run: |
          node -v
          sudo npm install -g npm@${NPM_VERSION} --force
          npm -v

      - name: Validate Postman files
        run: |
          if [ ! -f ${{ env.POSTMAN_COLLECTION }} ]; then
            echo "Postman collection not found!" && exit 1
          fi
          if [ ! -f ${{ env.POSTMAN_ENVIRONMENT }} ]; then
            echo "Postman environment not found!" && exit 1
          fi

#      - name: Install Docker with specific version
#        run: |
#          # Step 1: Update package index and install dependencies
#          sudo apt-get update
#          sudo apt-get install -y \
#            ca-certificates \
#            curl \
#            gnupg \
#            lsb-release
#
#          # Step 2: Add Docker's official GPG key
#          sudo mkdir -m 0755 -p /etc/apt/keyrings
#          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | \
#            sudo tee /etc/apt/keyrings/docker.asc > /dev/null
#
#          # Step 3: Add Docker's official repository
#          echo "deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.asc] \
#            https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | \
#            sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
#
#          # Step 4: Update package index again and install Docker using the Docker installation script
#          sudo apt-get update
#          curl -fsSL https://get.docker.com | VERSION=${DOCKER_VERSION}
#
#          # Step 5: Verify Docker installation
#          docker --version
#
#      - name: Install Docker Compose with specific version
#        run: |
#          sudo curl -L "https://github.com/docker/compose/releases/download/v${{ env.DOCKER_COMPOSE_VERSION }}/docker-compose-$(uname -s)-$(uname -m)" \
#            -o /usr/local/bin/docker-compose
#          sudo chmod +x /usr/local/bin/docker-compose
#          docker-compose --version
#
#
#      - name: Build and run services using start.sh script
#        run: |
#          chmod +x ${{ env.DOCKER_COMPOSE_DIR }}/startup_helper.sh
#          chmod +x ${{ env.DOCKER_COMPOSE_DIR }}/keycloak/start.sh
#          # Check if docker-compose is available before running the start.sh script
#          which docker-compose || { echo "docker-compose is not installed or not in PATH"; exit 1; }
#          cd ${{ env.DOCKER_COMPOSE_DIR }}/keycloak
#          ./start.sh

      - name: Install Newman with specific version
        run: |
          npm install -g newman@${{ env.NEWMAN_VERSION }} newman-reporter-html
          newman --version

#      - name: Wait for service to be available
#        run: |
#          max_retries=10  # Set the max number of retries
#          count=0
#          until [ $count -ge $max_retries ]
#          do
#            response=$(curl -s http://localhost:9000/health/ready)
#            if [[ "$response" == *'"status": "UP"'* ]]; then
#              echo "Service is up!"
#              break
#            fi
#            count=$((count+1))
#            echo "Waiting for service to start... Attempt $count/$max_retries"
#            sleep 10
#          done
#
#          if [ $count -ge $max_retries ]; then
#            echo "Service did not start in time. Exiting."
#            exit 1  # Fail the job if the service is not available after retries
#          fi
#
#      - name: Collect Docker container logs
#        run: |
#          # Loop through each container and print logs with a container-specific prefix
#          for container in mailhog keycloak openldap keycloak-db realm-export-generator keycloak_setup; do
#            echo "---- Logs for $container ----"
#
#            # Display the logs for the current container, prefixing each line with the container name for clarity
#            docker logs "$container" | sed "s/^/[$container] /"
#
#            echo "---- End of logs for $container ----"
#          done

      - name: Run Postman tests with Newman
        id: test-results # id is used later on to check whether tests passed or failed
        run: |
          newman run ${{ env.POSTMAN_COLLECTION }} \
            -e ${{ env.POSTMAN_ENVIRONMENT }} \
            --reporters cli,html,junit \
            --reporter-html-export ${{ env.NEWMAN_REPORT_FILE }} \
            --reporter-junit-export junit-report.xml

      - name: Set Initial Test Results Summary 📜
        run: |
          echo "SUMMARY=Test run completed, view summary after deployment." >> $GITHUB_STEP_SUMMARY
          echo "HTML_REPORT_URL=https://$GITHUB_ACTOR.github.io/${{ github.repository }}/postman-report.html" >> $GITHUB_STEP_SUMMARY
          echo "XML_REPORT_URL=https://$GITHUB_ACTOR.github.io/${{ github.repository }}/postman-report.xml" >> $GITHUB_STEP_SUMMARY



     #      - name: Collect Docker container logs
#        run: |
#          # Loop through each container and print logs with a container-specific prefix
#          for container in mailhog keycloak openldap keycloak-db realm-export-generator keycloak_setup; do
#            echo "---- Logs for $container ----"
#
#            # Display the logs for the current container, prefixing each line with the container name for clarity
#            docker logs "$container" | sed "s/^/[$container] /"
#
#            echo "---- End of logs for $container ----"
#          done

      - name: Update README with dynamic badge status
        if: always()  # This ensures the step runs regardless of test pass/fail
        run: |
          # Combine status and badge color into one variable
          if [ "${{ steps.test-results.outcome }}" == "success" ]; then
            BADGE="passing-brightgreen"
          else
            BADGE="failing-red"
          fi
      
          # Construct the badge URL using the combined variable
          BADGE_URL="https://img.shields.io/badge/build-${BADGE}?url=https://$GITHUB_ACTOR.github.io/${{ github.repository }}/postman-report.html"
          
          echo "![Test Results]($BADGE_URL)" > temp.md
          cat README.md >> temp.md  # Append existing README to temp.md
          mv temp.md README.md  # Replace README.md with updated content

      - name: Create a directory to store README and Newman report
        run: |
          mkdir -p deploy-content
          cp README.md deploy-content/
          cp ${{ env.NEWMAN_REPORT_FILE }} deploy-content/

      - name: Upload the content for GitHub Pages
        uses: actions/upload-artifact@v4 #v3 - Error: Unable to find any artifacts for the associated workflow
        with:
          name: ${{ env.PAGES_FOLDER }}
          path: |
            README.md
            junit-report.xml
            ${{ env.NEWMAN_REPORT_FILE }}

  deploy-gh-pages:
    name: gh-pages-deployment
    runs-on: ubuntu-latest
    needs: build
  
    permissions:
      contents: write
  
    env:
      ARTIFACT_NAME: artifact.tar
      REPO_NAME: ${{ github.repository }}
      GITHUB_ACTOR: ${{ github.actor }}
      GITHUB_URL: https://${{ github.actor }}.github.io/${{ github.repository }}
  
    steps:
      - name: Checkout the Repository 🛎️
        uses: actions/checkout@v4
      
      - name: Download GitHub Pages Artifact 📦
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.PAGES_FOLDER }}
          path: ${{ env.PAGES_FOLDER }}
      
      - name: Check Contents of the Directory 📂
        run: |
          ls -R .
      
      - name: Check README.md Existence 📄
        run: |
          if [ -f "${{ env.PAGES_FOLDER }}/README.md" ]; then
            echo "README.md found"
          else
            echo "README.md is missing!" && exit 1
          fi
      
      - name: Deploy to GitHub Pages 🚀
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: ${{ env.PAGES_FOLDER }}
      
      - name: Display GitHub Pages URL 🌐
        run: |
          echo "The GitHub Pages URL is: ${{ env.GITHUB_URL }}"

  post-deploy-summary:
    runs-on: ubuntu-latest
    needs: deploy-gh-pages
    steps:
      - name: Display Test Results Summary 📜
        run: |
          echo "### Postman Test Results" >> $GITHUB_STEP_SUMMARY
          echo "#### Summary:" >> $GITHUB_STEP_SUMMARY
          echo "Test run completed successfully!" >> $GITHUB_STEP_SUMMARY
          echo "#### HTML Report: [View HTML Report](${{ env.HTML_REPORT_URL }})" >> $GITHUB_STEP_SUMMARY
          echo "#### XML Report: [View XML Report](${{ env.XML_REPORT_URL }})" >> $GITHUB_STEP_SUMMARY

      - name: Display Summary 📝
        run: |
          cat $GITHUB_STEP_SUMMARY