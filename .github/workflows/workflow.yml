name: CI/CD Workflow

on:
  push:
    branches:
      - everything
  pull_request:
    branches:
      - everything
permissions:
  contents: write  # allows pushing to the repository

env:
  NPM_VERSION: 10.9.0
  DOCKER_COMPOSE_DIR: .
  NEWMAN_VERSION: 5.3.0
  DOCKER_VERSION: 5:27.3.1
  DOCKER_COMPOSE_VERSION: 2.29.2
  NEWMAN_REPORT_FILE: postman-report.html
  DOCKER_COMPOSE_FILE: docker-compose.yml
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  POSTMAN_COLLECTION: postman/keycloak-postman-collection.json
  POSTMAN_ENVIRONMENT: postman/keycloak-local.postman_environment.json

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Cache Docker images
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-docker-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-docker-

      - name: Cache npm dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Check and install Node.js and npm version
        run: |
          node -v
          sudo npm install -g npm@${NPM_VERSION} --force
          npm -v

      - name: Validate Postman files
        run: |
          if [ ! -f ${{ env.POSTMAN_COLLECTION }} ]; then
            echo "Postman collection not found!" && exit 1
          fi
          if [ ! -f ${{ env.POSTMAN_ENVIRONMENT }} ]; then
            echo "Postman environment not found!" && exit 1
          fi

      - name: Install Docker with specific version
        run: |
          # Step 1: Update package index and install dependencies
          sudo apt-get update
          sudo apt-get install -y \
            ca-certificates \
            curl \
            gnupg \
            lsb-release

          # Step 2: Add Docker's official GPG key
          sudo mkdir -m 0755 -p /etc/apt/keyrings
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | \
            sudo tee /etc/apt/keyrings/docker.asc > /dev/null

          # Step 3: Add Docker's official repository
          echo "deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.asc] \
            https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | \
            sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

          # Step 4: Update package index again and install Docker using the Docker installation script
          sudo apt-get update
          curl -fsSL https://get.docker.com | VERSION=${DOCKER_VERSION}

          # Step 5: Verify Docker installation
          docker --version

      - name: Install Docker Compose with specific version
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v${{ env.DOCKER_COMPOSE_VERSION }}/docker-compose-$(uname -s)-$(uname -m)" \
            -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version
      

      - name: Build and run services using start.sh script
        run: |
          chmod +x ${{ env.DOCKER_COMPOSE_DIR }}/startup_helper.sh
          chmod +x ${{ env.DOCKER_COMPOSE_DIR }}/keycloak/start.sh
          # Check if docker-compose is available before running the start.sh script
          which docker-compose || { echo "docker-compose is not installed or not in PATH"; exit 1; }
          cd ${{ env.DOCKER_COMPOSE_DIR }}/keycloak
          ./start.sh

      - name: Install Newman with specific version
        run: |
          npm install -g newman@${{ env.NEWMAN_VERSION }} newman-reporter-html
          newman --version

      - name: Wait for service to be available
        run: |
          max_retries=10  # Set the max number of retries
          count=0
          until [ $count -ge $max_retries ]
          do
            response=$(curl -s http://localhost:9000/health/ready)
            if [[ "$response" == *'"status": "UP"'* ]]; then
              echo "Service is up!"
              break
            fi
            count=$((count+1))
            echo "Waiting for service to start... Attempt $count/$max_retries"
            sleep 10
          done
          
          if [ $count -ge $max_retries ]; then
            echo "Service did not start in time. Exiting."
            exit 1  # Fail the job if the service is not available after retries
          fi

      - name: Collect Docker container logs
        run: |
          # Loop through each container and print logs with a container-specific prefix
          for container in mailhog keycloak openldap keycloak-db realm-export-generator keycloak_setup; do
            echo "---- Logs for $container ----"

            # Display the logs for the current container, prefixing each line with the container name for clarity
            docker logs "$container" | sed "s/^/[$container] /"

            echo "---- End of logs for $container ----"
          done

      - name: Run Postman tests with Newman
        run: |
          newman run ${{ env.POSTMAN_COLLECTION }} \
            -e ${{ env.POSTMAN_ENVIRONMENT }} \
            --reporters cli,html,junit \
            --reporter-html-export ${{ env.NEWMAN_REPORT_FILE }} \
            --reporter-junit-export junit-report.xml

      - name: Collect Docker container logs
        run: |
          # Loop through each container and print logs with a container-specific prefix
          for container in mailhog keycloak openldap keycloak-db realm-export-generator keycloak_setup; do
            echo "---- Logs for $container ----"

            # Display the logs for the current container, prefixing each line with the container name for clarity
            docker logs "$container" | sed "s/^/[$container] /"

            echo "---- End of logs for $container ----"
          done

      - name: Upload Postman test report as artifact
        uses: actions/upload-artifact@v3
        with:
          name: postman-test-report
          path: ${{ env.NEWMAN_REPORT_FILE }}

      - name: Generate and move Postman test report to GitHub Pages folder
        run: |
          mkdir -p docs  # Create the docs folder if it doesn't exist
          cp ${{ env.NEWMAN_REPORT_FILE }} docs/postman-report.html  # Move the report to docs folder

      - name: Generate link to Postman test report
        run: |
          echo "## Postman Test Report" >> README.md
          echo "[View Test Report](https://$GITHUB_ACTOR.github.io/${{ github.repository }}/postman-report.html)" >> README.md
#          echo "[View Test Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> README.md


      - name: Clean up Docker containers and volumes
        run: |
          # Explicit check for docker-compose before using it
          which docker-compose || { echo "docker-compose is not installed or not in PATH"; exit 1; }
          cd ${{ env.DOCKER_COMPOSE_DIR }}/keycloak
          docker-compose -f ${{ env.DOCKER_COMPOSE_FILE }} down --volumes --remove-orphans

      - name: Deploy README.md to GitHub Pages
        #        if: github.ref == 'refs/heads/main'  # Ensure this step only runs for the main branch
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git checkout -b gh-pages
          
          # Copy README.md as index.md for GitHub Pages rendering
          cp README.md ./index.md
          
          # Add and commit the new index.md file
          git add index.md
          git commit -m "Deploy README.md to GitHub Pages"
          
          # Push to GitHub Pages branch
          git push --force --set-upstream origin gh-pages
