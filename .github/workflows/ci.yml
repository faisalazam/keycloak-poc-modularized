name: CI/CD Workflow

on:
  push:
    branches:
      - master

env:
  NPM_VERSION: 10.9.0
  NEWMAN_VERSION: 5.3.0
  PAGES_FOLDER: github-pages
  DOCKER_COMPOSE_FILE: docker-compose.yml
  NEWMAN_XML_REPORT_FILE: postman-report.xml
  NEWMAN_HTML_REPORT_FILE: postman-report.html
  DOCKER_VERSION: 5:28.0.1-1~ubuntu.24.04~noble
  #  POSTMAN_COLLECTION: postman/sample.json
  POSTMAN_COLLECTION: postman/keycloak-postman-collection.json
  POSTMAN_ENVIRONMENT: postman/keycloak-local.postman_environment.json

jobs:
  build:
    runs-on: ubuntu-24.04

    outputs:
      test_outcome: ${{ steps.test-results.outputs.outcome }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set SITE_ROOT_URL Variable
        run: echo "SITE_ROOT_URL=https://${GITHUB_ACTOR}.github.io/${GITHUB_REPOSITORY#*/}" >> $GITHUB_ENV

      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Validate Postman files
        run: |
          if [ ! -f ${{ env.POSTMAN_COLLECTION }} ]; then
            echo "Postman collection not found!" && exit 1
          fi
          if [ ! -f ${{ env.POSTMAN_ENVIRONMENT }} ]; then
            echo "Postman environment not found!" && exit 1
          fi

      - name: Install Docker with specific version
        run: sh ./install_docker.sh
        working-directory: ./.github/workflows/scripts

      - name: Check if docker compose is available before proceeding
        run: docker compose version || { echo "docker compose is not installed or not in PATH"; exit 1; }

      - name: OpenSSL Version
        run: openssl version

      - name: Generate certificates
        run: sh ./scripts/generate_certificate.sh

      - name: Build and run services using start.sh script
        id: docker-start
        run: |
          chmod +x ./startup_helper.sh
          chmod +x ./ci.sh
          chmod +x ./start.sh
          ./ci.sh

          # Check if any container is running
          container_count=$(docker ps -q | wc -l)
          if [ "$container_count" -gt 0 ]; then
            echo "docker_service_started=true" >> $GITHUB_ENV
          else
            echo "docker_service_started=false" >> $GITHUB_ENV
          fi

      # Installing other dependencies after starting up the services as they'll act as an
      # implicit wait for the services to be fully ready before the tests interact with them.
      - name: Check and install Node.js and npm version
        run: |
          chmod +x ./install_npm_dependencies.sh
          ./install_npm_dependencies.sh
        working-directory: ./.github/workflows/scripts

      - name: Install Newman with specific version
        run: |
          npm install -g newman@${{ env.NEWMAN_VERSION }} newman-reporter-html
          newman --version

      - name: Wait for services to be available
        run: |
          chmod +x ./check_health.sh
          ./check_health.sh
        working-directory: ./.github/workflows/scripts

      - name: Collect Docker container logs
        if: ${{ always() && env.docker_service_started == 'true' }}
        run: |
          for container in $(docker ps --format '{{.Names}}'); do
            echo "---- Logs for $container ----"
            docker logs "$container" | sed "s/^/[$container] /"
            echo "---- End of logs for $container ----"
          done

      - name: Run Postman tests with Newman
        id: test-results # id is used later on to check whether tests passed or failed
        run: |
          newman run ${{ env.POSTMAN_COLLECTION }} \
            -e ${{ env.POSTMAN_ENVIRONMENT }} \
            --reporters cli,html,junit \
            --reporter-html-export ${{ env.NEWMAN_HTML_REPORT_FILE }} \
            --reporter-junit-export ${{ env.NEWMAN_XML_REPORT_FILE }}
          if [ $? -eq 0 ]; then
            echo "outcome=success" >> $GITHUB_OUTPUT
          else
            echo "outcome=failure" >> $GITHUB_OUTPUT
          fi

      - name: Report Build Failure
        if: ${{ always() && steps.test-results.outcome == 'skipped' }}
        run: |
          echo "### Workflow Summary" >> $GITHUB_STEP_SUMMARY
          echo "‚ùå Tests were not executed because the build failed or the test step was skipped." >> $GITHUB_STEP_SUMMARY

      # TODO: Make the report links build specific, i.e. add build number to the report URLs. 
      # That way each build will have its own reoirt file and wont get overwritten by the
      # subsequent builds, and will be able to look at the report of specific build.
      # TODO: Think of a way to remove the old build specific report files from 
      # the gh-pages branch once the build specific report links are implemented.
      - name: Set Test Results Summary
        if: ${{ always() && steps.test-results.outcome == 'success' }}
        run: |
          echo "### Postman Test Results" >> $GITHUB_STEP_SUMMARY
          echo "#### ‚úÖ All tests passed!" >> $GITHUB_STEP_SUMMARY
          echo "#### HTML Report: [View HTML Report](${{ env.SITE_ROOT_URL }}/${{ env.NEWMAN_HTML_REPORT_FILE }})" >> $GITHUB_STEP_SUMMARY
          echo "#### XML Report: [View XML Report](${{ env.SITE_ROOT_URL }}/${{ env.NEWMAN_XML_REPORT_FILE }})" >> $GITHUB_STEP_SUMMARY

      - name: Handle Test Failures
        if: ${{ always() && steps.test-results.outcome == 'failure' }}
        run: |
          echo "### Postman Test Results" >> $GITHUB_STEP_SUMMARY
          echo "#### ‚ùå Some tests failed!" >> $GITHUB_STEP_SUMMARY
          echo "#### HTML Report: [View HTML Report](${{ env.SITE_ROOT_URL }}/${{ env.NEWMAN_HTML_REPORT_FILE }})" >> $GITHUB_STEP_SUMMARY
          echo "#### XML Report: [View XML Report](${{ env.SITE_ROOT_URL }}/${{ env.NEWMAN_XML_REPORT_FILE }})" >> $GITHUB_STEP_SUMMARY

      - name: Collect Docker container logs after the tests have run
        if: ${{ always() && env.docker_service_started == 'true' }}
        run: |
          for container in $(docker ps --format '{{.Names}}'); do
            echo "---- Logs for $container ----"
            docker logs "$container" | sed "s/^/[$container] /"
            echo "---- End of logs for $container ----"
          done

      - name: Prepend CI build details to HTML report file
        if: ${{ always() && steps.test-results.outcome != 'skipped' }}
        run: |
          # Define the CI build details for HTML
          HTML_BUILD_INFO=$(
            printf "<strong>Build Number:</strong> %s<br>" "${{ github.run_number }}"
            printf "<strong>Commit:</strong> %s<br>" "${{ github.sha }}"
            printf "<strong>Workflow:</strong> %s<br>" "${{ github.workflow }}"
            printf "<strong>Project Link:</strong> <a href='%s'>%s</a><br>" "${{ env.SITE_ROOT_URL }}" "Keycloak POC Modularized"
          )
          
          # Prepend build details to the HTML report file
          {
            echo "$HTML_BUILD_INFO"
            cat "${{ env.NEWMAN_HTML_REPORT_FILE }}"
          } > tmp && mv tmp "${{ env.NEWMAN_HTML_REPORT_FILE }}"

      - name: Prepend CI build details to XML report file
        if: ${{ always() && steps.test-results.outcome != 'skipped' }}
        run: |
          # Define the CI build details for XML (with XML comments for line breaks)
          XML_BUILD_INFO=$(
            echo "<!--"
            echo -e "\tBuild Number: ${GITHUB_RUN_NUMBER}"
            echo -e "\tWorkflow: ${GITHUB_WORKFLOW}"
            echo -e "\tCommit: ${GITHUB_SHA}"
            echo -e "\tProject Link: ${SITE_ROOT_URL}"
            echo "-->"
          )

          # Prepend build details after XML declaration in the XML report file
          {
            # Save the first line (XML declaration)
            head -n 1 "${{ env.NEWMAN_XML_REPORT_FILE }}"

            # Insert build info as comments
            echo "$XML_BUILD_INFO"

            # Append the rest of the original XML content
            tail -n +2 "${{ env.NEWMAN_XML_REPORT_FILE }}"
          } > tmp && mv tmp "${{ env.NEWMAN_XML_REPORT_FILE }}"

      - name: Upload the content for GitHub Pages
        if: ${{ always() && steps.test-results.outcome != 'skipped' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PAGES_FOLDER }}
          path: |
            ${{ env.NEWMAN_XML_REPORT_FILE }}
            ${{ env.NEWMAN_HTML_REPORT_FILE }}

      - name: Clean up Docker containers and volumes
        if: ${{ always() && env.docker_service_started == 'true' }}
        run: |
          # Safety check before using docker-compose
          [ -f "${{ env.DOCKER_COMPOSE_FILE }}" ] || { echo "Compose file not found!"; exit 1; }
          docker-compose -f ${{ env.DOCKER_COMPOSE_FILE }} down --volumes --remove-orphans

  deploy-gh-pages:
    name: gh-pages-deployment
    runs-on: ubuntu-24.04
    needs: build
    if: always()

    permissions:
      contents: write

    steps:
      - name: Checkout the Repository üõéÔ∏è
        uses: actions/checkout@v4

      - name: Download GitHub Pages Artifact üì¶
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.PAGES_FOLDER }}
          path: ${{ env.PAGES_FOLDER }}

      - name: Check Contents of the Directory üìÇ
        run: |
          ls -R .

      - name: Copy all README files to GitHub Pages Folder
        run: |
          # Find all README.md files in the repository
          find . -name "*README.md" | while read -r file; do
            # For each README.md found, create the corresponding directory in the destination folder
            target_dir="${{ env.PAGES_FOLDER }}/$(dirname "$file")"
            mkdir -p "$target_dir"

            # Copy the README.md file to the corresponding directory in the GitHub Pages folder
            cp "$file" "$target_dir"
          done

      - name: Set SITE_ROOT_URL Variable
        run: echo "SITE_ROOT_URL=https://${GITHUB_ACTOR}.github.io/${GITHUB_REPOSITORY#*/}" >> $GITHUB_ENV

      - name: Update README with dynamic badge status
        run: |
          # Determine badge status based on test result outcome
          if [ "${{ needs.build.outputs.test_outcome }}" == "success" ]; then
            BADGE="passing-brightgreen"
          else
            BADGE="failing-red"
          fi
          
          # Construct the badge Markdown with full path to the report
          BADGE_MARKDOWN="[![Build Status](https://img.shields.io/badge/build-${BADGE})](${{ env.SITE_ROOT_URL }}/${{ env.NEWMAN_HTML_REPORT_FILE }})"

          echo "Badge MARKDOWN: ${BADGE_MARKDOWN}"
          
          # Update the README.md file with the badge
          sed -i "s|<!-- BUILD_BADGE_PLACEHOLDER -->|${BADGE_MARKDOWN}|g" "${{ env.PAGES_FOLDER }}/README.md"

      - name: Deploy to GitHub Pages üöÄ
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: ${{ env.PAGES_FOLDER }}

      - name: Display GitHub Pages URL üåê
        run: |
          echo "The GitHub Pages URL is: ${{ env.SITE_ROOT_URL }}"
